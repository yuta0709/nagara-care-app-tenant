openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - App
  /auth/login:
    post:
      operationId: login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInDto"
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"
      summary: ログイン
      tags: &a1
        - auth
  /auth/me:
    get:
      operationId: getMe
      parameters: []
      responses:
        "200":
          description: ユーザー情報の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      security:
        - JWT-auth: []
      summary: ログイン中のユーザー情報を取得
      tags: *a1
  /tenants/{tenantUid}/users:
    get:
      operationId: getUsers
      parameters:
        - name: tenantUid
          required: false
          in: path
          description: テナントUID（GLOBAL_ADMINの場合、省略すると全テナントのユーザーを取得）
          schema:
            type: string
      responses:
        "200":
          description: ユーザー一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponseDto"
      security:
        - JWT-auth: []
      summary: テナント内のユーザー一覧を取得
      tags: &a2
        - users
    post:
      operationId: createUser
      parameters:
        - name: tenantUid
          required: true
          in: path
          description: テナントUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantUserCreateInputDto"
      responses:
        "201":
          description: ユーザーの作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      security:
        - JWT-auth: []
      summary: テナントにユーザーを作成
      tags: *a2
  /users/{uid}:
    patch:
      operationId: updateUser
      parameters:
        - name: uid
          required: true
          in: path
          description: ユーザーUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInputDto"
      responses:
        "200":
          description: ユーザーの更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      security:
        - JWT-auth: []
      summary: ユーザーを更新
      tags: *a2
    delete:
      operationId: deleteUser
      parameters:
        - name: uid
          required: true
          in: path
          description: ユーザーUID
          schema:
            type: string
      responses:
        "200":
          description: ユーザーの削除に成功
      security:
        - JWT-auth: []
      summary: ユーザーを削除
      tags: *a2
  /tenants:
    get:
      operationId: getTenants
      parameters: []
      responses:
        "200":
          description: テナント一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantListResponseDto"
      security:
        - JWT-auth: []
      summary: テナント一覧を取得
      tags: &a3
        - tenants
    post:
      operationId: createTenant
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantCreateInputDto"
      responses:
        "201":
          description: テナントが正常に作成されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantDto"
      summary: テナントを作成する
      tags: *a3
  /tenants/{uid}:
    get:
      operationId: getTenant
      parameters:
        - name: uid
          required: true
          in: path
          description: テナントUID
          schema:
            type: string
      responses:
        "200":
          description: テナントの詳細取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantDto"
      security:
        - JWT-auth: []
      summary: テナントの詳細を取得
      tags: *a3
    patch:
      operationId: updateTenant
      parameters:
        - name: uid
          required: true
          in: path
          description: テナントUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantUpdateInputDto"
      responses:
        "200":
          description: テナントの更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantDto"
      security:
        - JWT-auth: []
      summary: テナントを更新
      tags: *a3
    delete:
      operationId: deleteTenant
      parameters:
        - name: uid
          required: true
          in: path
          description: テナントUID
          schema:
            type: string
      responses:
        "200":
          description: テナントの削除に成功
      security:
        - JWT-auth: []
      summary: テナントを削除
      tags: *a3
  /tenants/{tenantUid}/residents:
    get:
      operationId: getResidents
      parameters:
        - name: tenantUid
          required: false
          in: path
          description: テナントUID
          schema:
            type: string
      responses:
        "200":
          description: 利用者一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResidentListResponseDto"
      security: &a4
        - JWT-auth: []
      summary: テナント内の利用者一覧を取得
      tags: &a5
        - residents
    post:
      operationId: createResident
      parameters:
        - name: tenantUid
          required: true
          in: path
          description: テナントUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResidentCreateInputDto"
      responses:
        "201":
          description: 利用者の作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResidentDto"
      security: *a4
      summary: テナントに利用者を作成
      tags: *a5
  /tenants/{tenantUid}/residents/{uid}:
    get:
      operationId: getResident
      parameters:
        - name: tenantUid
          required: true
          in: path
          description: テナントUID
          schema:
            type: string
        - name: uid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      responses:
        "200":
          description: 利用者の詳細取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResidentDto"
      security: *a4
      summary: 利用者の詳細を取得
      tags: *a5
    patch:
      operationId: updateResident
      parameters:
        - name: tenantUid
          required: true
          in: path
          description: テナントUID
          schema:
            type: string
        - name: uid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResidentUpdateInputDto"
      responses:
        "200":
          description: 利用者の更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResidentDto"
      security: *a4
      summary: 利用者を更新
      tags: *a5
    delete:
      operationId: deleteResident
      parameters:
        - name: tenantUid
          required: true
          in: path
          description: テナントUID
          schema:
            type: string
        - name: uid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      responses:
        "200":
          description: 利用者の削除に成功
      security: *a4
      summary: 利用者を削除
      tags: *a5
  /residents/{residentUid}/food-records:
    get:
      operationId: getFoodRecords
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      responses:
        "200":
          description: 食事記録一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodRecordListResponseDto"
      security: &a6
        - JWT-auth: []
      summary: 利用者の食事記録一覧を取得
      tags: &a7
        - food-records
    post:
      operationId: createFoodRecord
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodRecordCreateInputDto"
      responses:
        "201":
          description: 食事記録の作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodRecordDto"
      security: *a6
      summary: 食事記録を作成
      tags: *a7
  /residents/{residentUid}/food-records/daily:
    get:
      operationId: getDailyFoodRecords
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: 開始日（YYYY-MM-DD形式）。指定しない場合は過去30日間
          schema:
            type: string
        - name: endDate
          required: false
          in: query
          description: 終了日（YYYY-MM-DD形式）。指定しない場合は現在日
          schema:
            type: string
      responses:
        "200":
          description: 日別食事記録一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyFoodRecordsListResponseDto"
      security: *a6
      summary: 利用者の日別食事記録一覧を取得
      tags: *a7
  /residents/{residentUid}/food-records/{uid}:
    patch:
      operationId: updateFoodRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 食事記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodRecordUpdateInputDto"
      responses:
        "200":
          description: 食事記録の更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodRecordDto"
      security: *a6
      summary: 食事記録を更新
      tags: *a7
    delete:
      operationId: deleteFoodRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 食事記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 食事記録の削除に成功
      security: *a6
      summary: 食事記録を削除
      tags: *a7
  /residents/{residentUid}/food-records/{uid}/transcription:
    get:
      operationId: getFoodRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 食事記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 食事記録の文字起こし取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a6
      summary: 食事記録の文字起こしを取得
      tags: *a7
    patch:
      operationId: appendFoodRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 食事記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 食事記録の文字起こし追記に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a6
      summary: 食事記録の文字起こしを追記
      tags: *a7
    put:
      operationId: updateFoodRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 食事記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 食事記録の文字起こし置換に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a6
      summary: 食事記録の文字起こしを置換
      tags: *a7
    delete:
      operationId: deleteFoodRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 食事記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 食事記録の文字起こし削除に成功
      security: *a6
      summary: 食事記録の文字起こしを削除
      tags: *a7
  /residents/{residentUid}/food-records/{uid}/extract:
    post:
      operationId: extractFoodRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 食事記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 食事記録からの情報抽出に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodRecordExtractedDto"
      security: *a6
      summary: 食事記録から情報を抽出
      tags: *a7
  /residents/{residentUid}/bath-records:
    get:
      operationId: getBathRecords
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      responses:
        "200":
          description: 入浴記録一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BathRecordListResponseDto"
      security: &a8
        - JWT-auth: []
      summary: 利用者の入浴記録一覧を取得
      tags: &a9
        - bath-records
    post:
      operationId: createBathRecord
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BathRecordCreateInputDto"
      responses:
        "201":
          description: 入浴記録の作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BathRecordDto"
      security: *a8
      summary: 入浴記録を作成
      tags: *a9
  /residents/{residentUid}/bath-records/{uid}:
    patch:
      operationId: updateBathRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 入浴記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BathRecordUpdateInputDto"
      responses:
        "200":
          description: 入浴記録の更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BathRecordDto"
      security: *a8
      summary: 入浴記録を更新
      tags: *a9
    delete:
      operationId: deleteBathRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 入浴記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 入浴記録の削除に成功
      security: *a8
      summary: 入浴記録を削除
      tags: *a9
  /residents/{residentUid}/bath-records/{uid}/transcription:
    get:
      operationId: getBathRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 入浴記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 入浴記録の文字起こし取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a8
      summary: 入浴記録の文字起こしを取得
      tags: *a9
    patch:
      operationId: appendBathRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 入浴記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 入浴記録の文字起こし追記に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a8
      summary: 入浴記録の文字起こしを追記
      tags: *a9
    put:
      operationId: updateBathRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 入浴記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 入浴記録の文字起こし置換に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a8
      summary: 入浴記録の文字起こしを置換
      tags: *a9
    delete:
      operationId: deleteBathRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 入浴記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 入浴記録の文字起こし削除に成功
      security: *a8
      summary: 入浴記録の文字起こしを削除
      tags: *a9
  /residents/{residentUid}/bath-records/{uid}/extract:
    post:
      operationId: extractBathRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 入浴記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 入浴記録の情報抽出に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BathRecordExtractedDto"
      security: *a8
      summary: 入浴記録から情報を抽出
      tags: *a9
  /residents/{residentUid}/elimination-records:
    get:
      operationId: getEliminationRecords
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      responses:
        "200":
          description: 排泄記録一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EliminationRecordListResponseDto"
      security: &a10
        - JWT-auth: []
      summary: 利用者の排泄記録一覧を取得
      tags: &a11
        - elimination-records
    post:
      operationId: createEliminationRecord
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EliminationRecordCreateInputDto"
      responses:
        "201":
          description: 排泄記録の作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EliminationRecordDto"
      security: *a10
      summary: 排泄記録を作成
      tags: *a11
  /residents/{residentUid}/elimination-records/{uid}:
    patch:
      operationId: updateEliminationRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 排泄記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EliminationRecordUpdateInputDto"
      responses:
        "200":
          description: 排泄記録の更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EliminationRecordDto"
      security: *a10
      summary: 排泄記録を更新
      tags: *a11
    delete:
      operationId: deleteEliminationRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 排泄記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 排泄記録の削除に成功
      security: *a10
      summary: 排泄記録を削除
      tags: *a11
  /residents/{residentUid}/elimination-records/{uid}/transcription:
    get:
      operationId: getEliminationRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 排泄記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 排泄記録の文字起こし取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a10
      summary: 排泄記録の文字起こしを取得
      tags: *a11
    patch:
      operationId: appendEliminationRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 排泄記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 排泄記録の文字起こし追記に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a10
      summary: 排泄記録の文字起こしを追記
      tags: *a11
    put:
      operationId: updateEliminationRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 排泄記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 排泄記録の文字起こし置換に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a10
      summary: 排泄記録の文字起こしを置換
      tags: *a11
    delete:
      operationId: deleteEliminationRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 排泄記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 排泄記録の文字起こし削除に成功
      security: *a10
      summary: 排泄記録の文字起こしを削除
      tags: *a11
  /residents/{residentUid}/elimination-records/{uid}/extract:
    post:
      operationId: extractEliminationRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 排泄記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 排泄記録からの情報抽出に成功
          content:
            application/json:
              schema:
                type: string
      security: *a10
      summary: 排泄記録から情報を抽出
      tags: *a11
  /residents/{residentUid}/daily-records:
    get:
      operationId: getDailyRecords
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      responses:
        "200":
          description: 日常記録一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyRecordListResponseDto"
      security: &a12
        - JWT-auth: []
      summary: 利用者の日常記録一覧を取得
      tags: &a13
        - daily-records
    post:
      operationId: createDailyRecord
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DailyRecordCreateInputDto"
      responses:
        "201":
          description: 日常記録の作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyRecordDto"
      security: *a12
      summary: 日常記録を作成
      tags: *a13
  /residents/{residentUid}/daily-records/{uid}:
    get:
      operationId: getDailyRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 日常記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 日常記録の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyRecordDto"
      security: *a12
      summary: 個別の日常記録を取得
      tags: *a13
    patch:
      operationId: updateDailyRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 日常記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DailyRecordUpdateInputDto"
      responses:
        "200":
          description: 日常記録の更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyRecordDto"
      security: *a12
      summary: 日常記録を更新
      tags: *a13
    delete:
      operationId: deleteDailyRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 日常記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 日常記録の削除に成功
      security: *a12
      summary: 日常記録を削除
      tags: *a13
  /residents/{residentUid}/daily-records/{uid}/transcription:
    get:
      operationId: getDailyRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 日常記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 日常記録の文字起こし取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a12
      summary: 日常記録の文字起こしを取得
      tags: *a13
    patch:
      operationId: appendDailyRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 日常記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 日常記録の文字起こし追記に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a12
      summary: 日常記録の文字起こしを追記
      tags: *a13
    put:
      operationId: updateDailyRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 日常記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 日常記録の文字起こし置換に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a12
      summary: 日常記録の文字起こしを置換
      tags: *a13
    delete:
      operationId: deleteDailyRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 日常記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 日常記録の文字起こし削除に成功
      security: *a12
      summary: 日常記録の文字起こしを削除
      tags: *a13
  /residents/{residentUid}/daily-records/{uid}/extract:
    get:
      operationId: extractDailyRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 日常記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 日常記録の抽出に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DailyRecordExtractedDto"
      security: *a12
      summary: 日常記録を抽出
      tags: *a13
  /residents/{residentUid}/beverage-records:
    get:
      operationId: getBeverageRecords
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      responses:
        "200":
          description: 飲料記録一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeverageRecordListResponseDto"
      security: &a14
        - JWT-auth: []
      summary: 利用者の飲料記録一覧を取得
      tags: &a15
        - beverage-records
    post:
      operationId: createBeverageRecord
      parameters:
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeverageRecordCreateInputDto"
      responses:
        "201":
          description: 飲料記録の作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeverageRecordDto"
      security: *a14
      summary: 飲料記録を作成
      tags: *a15
  /residents/{residentUid}/beverage-records/{uid}:
    patch:
      operationId: updateBeverageRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 飲料記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeverageRecordUpdateInputDto"
      responses:
        "200":
          description: 飲料記録の更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeverageRecordDto"
      security: *a14
      summary: 飲料記録を更新
      tags: *a15
    delete:
      operationId: deleteBeverageRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 飲料記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 飲料記録の削除に成功
      security: *a14
      summary: 飲料記録を削除
      tags: *a15
  /residents/{residentUid}/beverage-records/{uid}/transcription:
    get:
      operationId: getBeverageRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 飲料記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 飲料記録の文字起こし取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a14
      summary: 飲料記録の文字起こしを取得
      tags: *a15
    patch:
      operationId: appendBeverageRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 飲料記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 飲料記録の文字起こし追記に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a14
      summary: 飲料記録の文字起こしを追記
      tags: *a15
    put:
      operationId: updateBeverageRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 飲料記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 飲料記録の文字起こし置換に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a14
      summary: 飲料記録の文字起こしを置換
      tags: *a15
    delete:
      operationId: deleteBeverageRecordTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: 飲料記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 飲料記録の文字起こし削除に成功
      security: *a14
      summary: 飲料記録の文字起こしを削除
      tags: *a15
  /residents/{residentUid}/beverage-records/{uid}/extract:
    post:
      operationId: extractBeverageRecord
      parameters:
        - name: uid
          required: true
          in: path
          description: 飲み物摂取記録UID
          schema:
            type: string
        - name: residentUid
          required: true
          in: path
          description: 利用者UID
          schema: {}
      responses:
        "200":
          description: 飲み物摂取記録の情報抽出に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeverageRecordExtractedDto"
      security: *a14
      summary: 飲み物摂取記録から情報を抽出
      tags: *a15
  /assessments:
    get:
      operationId: getAssessments
      parameters: []
      responses:
        "200":
          description: アセスメント一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentListResponseDto"
      security: &a16
        - JWT-auth: []
      summary: アセスメント一覧を取得
      tags: &a17
        - assessments
    post:
      operationId: createAssessment
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssessmentCreateInputDto"
      responses:
        "201":
          description: アセスメントの作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentDto"
      security: *a16
      summary: アセスメントを作成
      tags: *a17
  /assessments/{uid}:
    get:
      operationId: getAssessment
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      responses:
        "200":
          description: アセスメントの詳細取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentDto"
      security: *a16
      summary: アセスメントの詳細を取得
      tags: *a17
    patch:
      operationId: updateAssessment
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssessmentUpdateInputDto"
      responses:
        "200":
          description: アセスメントの更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentDto"
      security: *a16
      summary: アセスメントを更新
      tags: *a17
    delete:
      operationId: deleteAssessment
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      responses:
        "200":
          description: アセスメントの削除に成功
      security: *a16
      summary: アセスメントを削除
      tags: *a17
  /assessments/{uid}/transcription:
    get:
      operationId: getAssessmentTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      responses:
        "200":
          description: アセスメントの文字起こし取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a16
      summary: アセスメントの文字起こしを取得
      tags: *a17
    patch:
      operationId: appendAssessmentTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: アセスメントの文字起こし追記に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a16
      summary: アセスメントの文字起こしを追記
      tags: *a17
    put:
      operationId: updateAssessmentTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: アセスメントの文字起こし置換に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranscriptionDto"
      security: *a16
      summary: アセスメントの文字起こしを置換
      tags: *a17
    delete:
      operationId: deleteAssessmentTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      responses:
        "200":
          description: アセスメントの文字起こし削除に成功
      security: *a16
      summary: アセスメントの文字起こしを削除
      tags: *a17
  /assessments/{uid}/summarize:
    post:
      operationId: summarizeAssessment
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      responses:
        "200":
          description: アセスメントの要約作成に成功
          content:
            application/json:
              schema:
                type: string
      security: *a16
      summary: アセスメントの要約を作成
      tags: *a17
  /assessments/{uid}/extract:
    post:
      operationId: extractAssessment
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメントUID
          schema:
            type: string
      responses:
        "200":
          description: アセスメントの内容抽出に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentExtractDto"
      security: *a16
      summary: アセスメントの内容を抽出
      tags: *a17
  /subjects:
    get:
      operationId: getSubjects
      parameters:
        - name: tenantUid
          required: false
          in: path
          description: テナントUID
          schema: {}
      responses:
        "200":
          description: アセスメント対象者一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectListResponseDto"
      security: &a18
        - JWT-auth: []
      summary: テナント内のアセスメント対象者一覧を取得
      tags: &a19
        - subjects
    post:
      operationId: createSubject
      parameters:
        - name: tenantUid
          required: true
          in: path
          description: テナントUID
          schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubjectCreateInputDto"
      responses:
        "201":
          description: アセスメント対象者の作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectDto"
      security: *a18
      summary: テナントにアセスメント対象者を作成
      tags: *a19
  /subjects/{uid}:
    get:
      operationId: getSubject
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメント対象者UID
          schema:
            type: string
      responses:
        "200":
          description: アセスメント対象者の詳細取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectDto"
      security: *a18
      summary: アセスメント対象者の詳細を取得
      tags: *a19
    patch:
      operationId: updateSubject
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメント対象者UID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubjectUpdateInputDto"
      responses:
        "200":
          description: アセスメント対象者の更新に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectDto"
      security: *a18
      summary: アセスメント対象者を更新
      tags: *a19
    delete:
      operationId: deleteSubject
      parameters:
        - name: uid
          required: true
          in: path
          description: アセスメント対象者UID
          schema:
            type: string
      responses:
        "200":
          description: アセスメント対象者の削除に成功
      security: *a18
      summary: アセスメント対象者を削除
      tags: *a19
  /chats:
    post:
      operationId: createThread
      parameters: []
      responses:
        "201":
          description: スレッドの作成に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadCreateOutputDto"
      security:
        - JWT-auth: []
      summary: 新しいスレッドを作成
      tags: &a20
        - chats
    get:
      operationId: getThreads
      parameters: []
      responses:
        "200":
          description: スレッド一覧の取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadListOutputDto"
      security:
        - JWT-auth: []
      summary: スレッド一覧を取得
      tags: *a20
  /chats/{uid}:
    get:
      operationId: getThread
      parameters:
        - name: uid
          required: true
          in: path
          description: スレッドのUID
          schema:
            type: string
      responses:
        "200":
          description: スレッドの取得に成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadOutputDto"
      security:
        - JWT-auth: []
      summary: 特定のスレッドを取得
      tags: *a20
    put:
      operationId: updateThread
      parameters:
        - name: uid
          required: true
          in: path
          description: スレッドのUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThreadUpdateInputDto"
      responses:
        "200":
          description: ""
      security:
        - JWT-auth: []
      summary: スレッドを更新
      tags: *a20
    delete:
      operationId: deleteThread
      parameters:
        - name: uid
          required: true
          in: path
          description: スレッドのUID
          schema:
            type: string
      responses:
        "200":
          description: ""
      security:
        - JWT-auth: []
      summary: スレッドを削除
      tags: *a20
  /chats/{uid}/messages:
    post:
      operationId: createMessage
      parameters:
        - name: uid
          required: true
          in: path
          description: スレッドのUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageCreateInputDto"
      responses:
        "201":
          description: メッセージの作成に成功
      security:
        - JWT-auth: []
      summary: メッセージを作成
      tags: *a20
  /qa/sessions:
    post:
      operationId: createQaSession
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQaSessionDto"
      responses:
        "201":
          description: QAセッションが作成されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QaSessionOutputDto"
      security: &a21
        - JWT-auth: []
      summary: QAセッションを作成する
      tags: &a22
        - qa
    get:
      operationId: findQaSessionsByUser
      parameters: []
      responses:
        "200":
          description: QAセッション一覧が取得されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QaSessionListOutputDto"
      security: *a21
      summary: ユーザーに紐づくQAセッション一覧を取得する
      tags: *a22
  /qa/sessions/{uid}:
    get:
      operationId: findQaSession
      parameters:
        - name: uid
          required: true
          in: path
          description: QAセッションID
          schema:
            type: string
      responses:
        "200":
          description: QAセッションが取得されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QaSessionOutputDto"
        "404":
          description: QAセッションが見つかりません
      security: *a21
      summary: QAセッションを取得する
      tags: *a22
    delete:
      operationId: deleteQaSession
      parameters:
        - name: uid
          required: true
          in: path
          description: QAセッションID
          schema:
            type: string
      responses:
        "200":
          description: QAセッションが削除されました
        "404":
          description: QAセッションが見つかりません
      security: *a21
      summary: QAセッションを削除する
      tags: *a22
  /qa/question-answers:
    post:
      operationId: addQuestionAnswer
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuestionAnswerDto"
      responses:
        "201":
          description: 質問回答が作成されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerOutputDto"
      security: *a21
      summary: QAセッションに質問回答を追加する
      tags: *a22
  /qa/question-answers/{uid}:
    put:
      operationId: updateQuestionAnswer
      parameters:
        - name: uid
          required: true
          in: path
          description: 質問回答ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuestionAnswerDto"
      responses:
        "200":
          description: 質問回答が更新されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerOutputDto"
        "404":
          description: 質問回答が見つかりません
      security: *a21
      summary: 質問回答を更新する
      tags: *a22
    delete:
      operationId: deleteQuestionAnswer
      parameters:
        - name: uid
          required: true
          in: path
          description: 質問回答ID
          schema:
            type: string
      responses:
        "200":
          description: 質問回答が削除されました
        "404":
          description: 質問回答が見つかりません
      security: *a21
      summary: 質問回答を削除する
      tags: *a22
  /qa/sessions/{uid}/upsert-question-answers:
    post:
      operationId: upsertQuestionAnswers
      parameters:
        - name: uid
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertQuestionAnswersDto"
      responses:
        "200":
          description: 質問回答が一括更新されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QaSessionOutputDto"
        "404":
          description: QAセッションが見つかりません
      security: *a21
      summary: QAセッションに紐づく質問回答を一括更新（置き換え）する
      tags: *a22
  /qa/sessions/{uid}/extract:
    get:
      operationId: extractQaPairsFromTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: QAセッションID
          schema:
            type: string
      responses:
        "200":
          description: 質問と回答のペアが抽出されました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtractQaPairsOutputDto"
      security: *a21
      summary: 文字起こしから質問と回答のペアを抽出する
      tags: *a22
  /qa/sessions/{uid}/transcription:
    put:
      operationId: updateTranscription
      parameters:
        - name: uid
          required: true
          in: path
          description: QAセッションID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranscriptionInputDto"
      responses:
        "200":
          description: 音声ファイルの文字起こしが更新されました
        "404":
          description: QAセッションが見つかりません
      security: *a21
      summary: QAセッションの音声ファイルの文字起こしを更新する
      tags: *a22
  /transcription:
    post:
      operationId: transcribeAudio
      parameters: []
      requestBody:
        required: true
        description: audio file
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TranscriptAudioInputDto"
      responses:
        "200":
          description: 文字起こしが成功した場合
          content:
            application/json:
              schema:
                type: string
      security:
        - JWT-auth: []
      summary: 音声ファイルを文字起こしする
      tags:
        - transcription
info:
  title: Nagara Care API
  description: ""
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    JWT-auth:
      scheme: bearer
      bearerFormat: JWT
      type: http
      name: JWT
      description: Enter JWT token
      in: header
  schemas:
    SignInDto:
      type: object
      properties:
        loginId:
          type: string
        password:
          type: string
      required:
        - loginId
        - password
    TokenDto:
      type: object
      properties:
        token:
          type: string
          description: JWTトークン
      required:
        - token
    UserDto:
      type: object
      properties:
        uid:
          type: string
          description: ユーザーUID
        loginId:
          type: string
          description: ログインID
        familyName:
          type: string
          description: 姓
        givenName:
          type: string
          description: 名
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
        role:
          type: string
          description: ユーザー権限
        tenantUid:
          type: string
          description: テナントUID
      required:
        - uid
        - loginId
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - role
        - tenantUid
    UserListItemDto:
      type: object
      properties:
        uid:
          type: string
          description: ユーザーUID
        loginId:
          type: string
          description: ログインID
        familyName:
          type: string
          description: 姓
        givenName:
          type: string
          description: 名
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
        role:
          type: string
          description: ロール
          enum:
            - GLOBAL_ADMIN
            - TENANT_ADMIN
            - CAREGIVER
        createdAt:
          format: date-time
          type: string
          description: 作成日時
      required:
        - uid
        - loginId
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - role
        - createdAt
    UserListResponseDto:
      type: object
      properties:
        items:
          description: ユーザー一覧
          type: array
          items:
            $ref: "#/components/schemas/UserListItemDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    TenantUserCreateInputDto:
      type: object
      properties:
        loginId:
          type: string
          description: ログインID
        password:
          type: string
          description: パスワード
        familyName:
          type: string
          description: 姓
        givenName:
          type: string
          description: 名
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
        role:
          type: string
          description: ユーザー権限
      required:
        - loginId
        - password
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - role
    UserUpdateInputDto:
      type: object
      properties:
        familyName:
          type: string
          description: 姓
          example: 山田
        givenName:
          type: string
          description: 名
          example: 太郎
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
          example: ヤマダ
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
          example: タロウ
        role:
          type: string
          description: ユーザーロール
          enum:
            - GLOBAL_ADMIN
            - TENANT_ADMIN
            - CAREGIVER
          example: CAREGIVER
      required:
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - role
    TenantListItemDto:
      type: object
      properties:
        uid:
          type: string
          description: テナントUID
        name:
          type: string
          description: テナント名
        createdAt:
          format: date-time
          type: string
          description: 作成日時
      required:
        - uid
        - name
        - createdAt
    TenantListResponseDto:
      type: object
      properties:
        items:
          description: テナント一覧
          type: array
          items:
            $ref: "#/components/schemas/TenantListItemDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    TenantDto:
      type: object
      properties:
        uid:
          type: string
          description: テナントUID
        name:
          type: string
          description: テナント名
        createdAt:
          format: date-time
          type: string
          description: 作成日時
      required:
        - uid
        - name
        - createdAt
    TenantCreateInputDto:
      type: object
      properties:
        name:
          type: string
          description: テナント名
          example: 介護施設A
      required:
        - name
    TenantUpdateInputDto:
      type: object
      properties:
        name:
          type: string
          description: テナント名
          example: 介護施設A
      required:
        - name
    ResidentDto:
      type: object
      properties:
        uid:
          type: string
          description: UID
        tenantUid:
          type: string
          description: テナントUID
        familyName:
          type: string
          description: 姓
        givenName:
          type: string
          description: 名
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
        dateOfBirth:
          format: date-time
          type: string
          description: 生年月日
        gender:
          type: string
          description: 性別
          enum:
            - MALE
            - FEMALE
        admissionDate:
          format: date-time
          type: string
          description: 入所日
        createdAt:
          format: date-time
          type: string
          description: 作成日時
      required:
        - uid
        - tenantUid
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - dateOfBirth
        - gender
        - admissionDate
        - createdAt
    ResidentListResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ResidentDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    ResidentCreateInputDto:
      type: object
      properties:
        familyName:
          type: string
          description: 姓
          example: 山田
        givenName:
          type: string
          description: 名
          example: 太郎
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
          example: ヤマダ
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
          example: タロウ
        dateOfBirth:
          type: string
          description: 生年月日
          example: 1950-01-01
        gender:
          type: string
          description: 性別
          enum:
            - MALE
            - FEMALE
          example: MALE
        admissionDate:
          type: string
          description: 入所日
          example: 2024-01-01
      required:
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - dateOfBirth
        - gender
        - admissionDate
    ResidentUpdateInputDto:
      type: object
      properties:
        familyName:
          type: string
          description: 姓
          example: 山田
        givenName:
          type: string
          description: 名
          example: 太郎
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
          example: ヤマダ
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
          example: タロウ
        dateOfBirth:
          type: string
          description: 生年月日
          example: 1950-01-01
        gender:
          type: string
          description: 性別
          enum:
            - MALE
            - FEMALE
          example: MALE
        admissionDate:
          type: string
          description: 入所日
          example: 2024-01-01
      required:
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - dateOfBirth
        - gender
        - admissionDate
    FoodRecordDto:
      type: object
      properties:
        uid:
          type: string
          description: UID
        tenantUid:
          type: string
          description: テナントUID
        caregiverUid:
          type: string
          description: 介護者UID
        residentUid:
          type: string
          description: 利用者UID
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
        notes:
          type: string
          description: メモ
        mealTime:
          type: string
          description: 食事の時間帯
          enum:
            - BREAKFAST
            - LUNCH
            - DINNER
        mainCoursePercentage:
          type: number
          description: 主食の摂取率（%）
        sideDishPercentage:
          type: number
          description: 副食の摂取率（%）
        soupPercentage:
          type: number
          description: 汁物の摂取率（%）
        beverageType:
          type: string
          description: 飲み物の種類
          enum:
            - WATER
            - TEA
            - OTHER
        beverageVolume:
          type: number
          description: 飲み物の摂取量（ml）
      required:
        - uid
        - tenantUid
        - caregiverUid
        - residentUid
        - recordedAt
        - notes
        - mealTime
        - mainCoursePercentage
        - sideDishPercentage
        - soupPercentage
        - beverageType
        - beverageVolume
    FoodRecordListResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/FoodRecordDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    DailyFoodRecordsDto:
      type: object
      properties:
        date:
          type: string
          description: 日付
          example: 2024-03-20
        breakfast:
          description: 朝食の記録
          allOf:
            - $ref: "#/components/schemas/FoodRecordDto"
        lunch:
          description: 昼食の記録
          allOf:
            - $ref: "#/components/schemas/FoodRecordDto"
        dinner:
          description: 夕食の記録
          allOf:
            - $ref: "#/components/schemas/FoodRecordDto"
      required:
        - date
    DailyFoodRecordsListResponseDto:
      type: object
      properties:
        items:
          description: 日別食事記録一覧
          type: array
          items:
            $ref: "#/components/schemas/DailyFoodRecordsDto"
        total:
          type: number
          description: 総日数
          example: 10
      required:
        - items
        - total
    FoodRecordCreateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        mealTime:
          type: string
          description: 食事の時間帯
          enum:
            - BREAKFAST
            - LUNCH
            - DINNER
          example: LUNCH
        mainCoursePercentage:
          type: number
          description: 主食の摂取率（%）
          minimum: 0
          maximum: 100
          example: 80
        sideDishPercentage:
          type: number
          description: 副食の摂取率（%）
          minimum: 0
          maximum: 100
          example: 70
        soupPercentage:
          type: number
          description: 汁物の摂取率（%）
          minimum: 0
          maximum: 100
          example: 90
        beverageType:
          type: string
          description: 飲み物の種類
          enum:
            - WATER
            - TEA
            - OTHER
          example: WATER
        beverageVolume:
          type: number
          description: 飲み物の摂取量（ml）
          minimum: 0
          example: 200
      required:
        - recordedAt
        - mealTime
        - mainCoursePercentage
        - sideDishPercentage
        - soupPercentage
        - beverageType
        - beverageVolume
    FoodRecordUpdateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        mealTime:
          type: string
          description: 食事の時間帯
          enum:
            - BREAKFAST
            - LUNCH
            - DINNER
          example: LUNCH
        mainCoursePercentage:
          type: number
          description: 主食の摂取率（%）
          minimum: 0
          maximum: 100
          example: 80
        sideDishPercentage:
          type: number
          description: 副食の摂取率（%）
          minimum: 0
          maximum: 100
          example: 70
        soupPercentage:
          type: number
          description: 汁物の摂取率（%）
          minimum: 0
          maximum: 100
          example: 90
        beverageType:
          type: string
          description: 飲み物の種類
          enum:
            - WATER
            - TEA
            - OTHER
          example: WATER
        beverageVolume:
          type: number
          description: 飲み物の摂取量（ml）
          minimum: 0
          example: 200
      required:
        - recordedAt
        - mealTime
        - mainCoursePercentage
        - sideDishPercentage
        - soupPercentage
        - beverageType
        - beverageVolume
    TranscriptionDto:
      type: object
      properties:
        transcription:
          type: string
          description: 文字起こしテキスト
      required:
        - transcription
    TranscriptionInputDto:
      type: object
      properties:
        transcription:
          type: string
      required:
        - transcription
    FoodRecordExtractedDto:
      type: object
      properties:
        mainCoursePercentage:
          type: number
          description: 主食の摂取率（0-100%）
        sideDishPercentage:
          type: number
          description: 副食の摂取率（0-100%）
        soupPercentage:
          type: number
          description: 汁物の摂取率（0-100%）
        beverageType:
          type: string
          description: 飲み物の種類（水、お茶、その他）
        beverageVolume:
          type: number
          description: 飲み物の摂取量（ml）
        notes:
          type: string
          description: 特記事項
      required:
        - mainCoursePercentage
        - sideDishPercentage
        - soupPercentage
        - beverageType
        - beverageVolume
        - notes
    BathRecordDto:
      type: object
      properties:
        uid:
          type: string
          description: UID
        tenantUid:
          type: string
          description: テナントUID
        caregiverUid:
          type: string
          description: 介護者UID
        residentUid:
          type: string
          description: 利用者UID
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
        notes:
          type: string
          description: メモ
        bathMethod:
          type: string
          description: 入浴方法
      required:
        - uid
        - tenantUid
        - caregiverUid
        - residentUid
        - recordedAt
        - notes
        - bathMethod
    BathRecordListResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/BathRecordDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    BathRecordCreateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        bathMethod:
          type: string
          description: 入浴方法
          example: 一般浴
      required:
        - recordedAt
        - bathMethod
    BathRecordUpdateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        bathMethod:
          type: string
          description: 入浴方法
          example: 一般浴
      required:
        - recordedAt
        - bathMethod
    BathRecordExtractedDto:
      type: object
      properties:
        bathMethod:
          type: string
          description: 入浴方法
        notes:
          type: string
          description: 特記事項
      required:
        - bathMethod
        - notes
    EliminationRecordDto:
      type: object
      properties:
        uid:
          type: string
          description: UID
        tenantUid:
          type: string
          description: テナントUID
        caregiverUid:
          type: string
          description: 介護者UID
        residentUid:
          type: string
          description: 利用者UID
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
        notes:
          type: string
          description: メモ
        eliminationMethod:
          type: string
          description: 排泄方法
        hasFeces:
          type: boolean
          description: 便の有無
        fecalIncontinence:
          type: boolean
          description: 便失禁の有無
        fecesAppearance:
          type: string
          description: 便の性状
        fecesVolume:
          type: number
          description: 便の量（g）
        hasUrine:
          type: boolean
          description: 尿の有無
        urinaryIncontinence:
          type: boolean
          description: 尿失禁の有無
        urineAppearance:
          type: string
          description: 尿の性状
        urineVolume:
          type: number
          description: 尿量（ml）
      required:
        - uid
        - tenantUid
        - caregiverUid
        - residentUid
        - recordedAt
        - notes
        - eliminationMethod
        - hasFeces
        - fecalIncontinence
        - fecesAppearance
        - fecesVolume
        - hasUrine
        - urinaryIncontinence
        - urineAppearance
        - urineVolume
    EliminationRecordListResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/EliminationRecordDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    EliminationRecordCreateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        eliminationMethod:
          type: string
          description: 排泄方法
          example: トイレ
        hasFeces:
          type: boolean
          description: 便の有無
          example: true
        fecalIncontinence:
          type: boolean
          description: 便失禁の有無
          example: false
        fecesAppearance:
          type: string
          description: 便の性状
          example: 普通便
        fecesVolume:
          type: number
          description: 便の量（g）
          minimum: 0
          example: 100
        hasUrine:
          type: boolean
          description: 尿の有無
          example: true
        urinaryIncontinence:
          type: boolean
          description: 尿失禁の有無
          example: false
        urineAppearance:
          type: string
          description: 尿の性状
          example: 普通
        urineVolume:
          type: number
          description: 尿量（ml）
          minimum: 0
          example: 200
      required:
        - recordedAt
        - eliminationMethod
        - hasFeces
        - hasUrine
    EliminationRecordUpdateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        eliminationMethod:
          type: string
          description: 排泄方法
          example: トイレ
        hasFeces:
          type: boolean
          description: 便の有無
          example: true
        fecalIncontinence:
          type: boolean
          description: 便失禁の有無
          example: false
        fecesAppearance:
          type: string
          description: 便の性状
          example: 普通便
        fecesVolume:
          type: number
          description: 便の量（g）
          minimum: 0
          example: 100
        hasUrine:
          type: boolean
          description: 尿の有無
          example: true
        urinaryIncontinence:
          type: boolean
          description: 尿失禁の有無
          example: false
        urineAppearance:
          type: string
          description: 尿の性状
          example: 普通
        urineVolume:
          type: number
          description: 尿量（ml）
          minimum: 0
          example: 200
      required:
        - recordedAt
        - eliminationMethod
        - hasFeces
        - hasUrine
    DailyRecordDto:
      type: object
      properties:
        uid:
          type: string
          description: UID
        tenantUid:
          type: string
          description: テナントUID
        caregiverUid:
          type: string
          description: 介護者UID
        residentUid:
          type: string
          description: 利用者UID
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
        notes:
          type: string
          description: メモ
        dailyStatus:
          type: string
          description: 日常の状態
          enum:
            - NORMAL
            - WARNING
            - ALERT
      required:
        - uid
        - tenantUid
        - caregiverUid
        - residentUid
        - recordedAt
        - notes
        - dailyStatus
    DailyRecordListResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/DailyRecordDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    DailyRecordCreateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        dailyStatus:
          type: string
          description: 日常の状態
          enum:
            - NORMAL
            - WARNING
            - ALERT
          example: NORMAL
      required:
        - recordedAt
    DailyRecordUpdateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        dailyStatus:
          type: string
          description: 日常の状態
          enum:
            - NORMAL
            - WARNING
            - ALERT
          example: NORMAL
      required:
        - recordedAt
    DailyRecordExtractedDto:
      type: object
      properties:
        notes:
          type: string
        dailyStatus:
          type: string
      required:
        - notes
        - dailyStatus
    BeverageRecordDto:
      type: object
      properties:
        uid:
          type: string
          description: UID
        tenantUid:
          type: string
          description: テナントUID
        caregiverUid:
          type: string
          description: 介護者UID
        residentUid:
          type: string
          description: 利用者UID
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
        notes:
          type: string
          description: メモ
        beverageType:
          type: string
          description: 飲み物の種類
          enum:
            - WATER
            - TEA
            - OTHER
        volume:
          type: number
          description: 飲み物の量（ml）
      required:
        - uid
        - tenantUid
        - caregiverUid
        - residentUid
        - recordedAt
        - notes
        - beverageType
        - volume
    BeverageRecordListResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/BeverageRecordDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    BeverageRecordCreateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        beverageType:
          type: string
          description: 飲み物の種類
          enum:
            - WATER
            - TEA
            - OTHER
          example: WATER
        volume:
          type: number
          description: 飲み物の量（ml）
          minimum: 0
          example: 200
      required:
        - recordedAt
        - beverageType
        - volume
    BeverageRecordUpdateInputDto:
      type: object
      properties:
        recordedAt:
          format: date-time
          type: string
          description: 記録時刻
          example: 2024-03-20T12:00:00Z
        notes:
          type: string
          description: メモ
        beverageType:
          type: string
          description: 飲み物の種類
          enum:
            - WATER
            - TEA
            - OTHER
          example: WATER
        volume:
          type: number
          description: 飲み物の量（ml）
          minimum: 0
          example: 200
      required:
        - recordedAt
        - beverageType
        - volume
    BeverageRecordExtractedDto:
      type: object
      properties:
        beverageType:
          type: string
          description: 飲み物の種類
          enum:
            - WATER
            - TEA
            - OTHER
        volume:
          type: number
          description: 飲み物の量（ml）
        notes:
          type: string
          description: 特記事項
      required:
        - beverageType
        - volume
        - notes
    SubjectDto:
      type: object
      properties:
        uid:
          type: string
          description: UID
        familyName:
          type: string
          description: 姓
        givenName:
          type: string
          description: 名
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
        dateOfBirth:
          format: date-time
          type: string
          description: 生年月日
        gender:
          type: string
          description: 性別
          enum:
            - MALE
            - FEMALE
        createdAt:
          format: date-time
          type: string
          description: 作成日時
      required:
        - uid
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - dateOfBirth
        - gender
        - createdAt
    AssessmentDto:
      type: object
      properties:
        uid:
          type: string
          description: UID
        subjectUid:
          type: string
          description: アセスメント対象者UID
        subject:
          description: アセスメント対象者
          allOf:
            - $ref: "#/components/schemas/SubjectDto"
        tenantUid:
          type: string
          description: テナントUID
        userUid:
          type: string
          description: 記入者UID
        familyInfo:
          type: string
          description: 家族構成
        careLevel:
          type: string
          description: 要介護状態区分
          enum:
            - NEEDS_CARE_1
            - NEEDS_CARE_2
            - NEEDS_CARE_3
            - NEEDS_CARE_4
            - NEEDS_CARE_5
        physicalIndependence:
          type: string
          description: 障害高齢者の日常生活自立度判定基準
          enum:
            - INDEPENDENT
            - J1
            - J2
            - A1
            - A2
            - B1
            - B2
            - C1
            - C2
        cognitiveIndependence:
          type: string
          description: 認知症高齢者の日常生活自立度判定基準
          enum:
            - INDEPENDENT
            - I
            - IIa
            - IIb
            - IIIa
            - IIIb
            - IV
            - M
        medicalHistory:
          type: string
          description: 既往症
        medications:
          type: string
          description: 服用薬剤
        formalServices:
          type: string
          description: 使用しているフォーマルサービス
        informalSupport:
          type: string
          description: 使用しているインフォーマルサービス
        consultationBackground:
          type: string
          description: 相談に至った経緯
        lifeHistory:
          type: string
          description: 生活史
        complaints:
          type: string
          description: 主訴
        healthNotes:
          type: string
          description: 健康状態
        mentalStatus:
          type: string
          description: 精神状態
        physicalStatus:
          type: string
          description: 身体状態
        adlStatus:
          type: string
          description: ADL
        communication:
          type: string
          description: コミュニケーション
        dailyLife:
          type: string
          description: 日常生活
        instrumentalADL:
          type: string
          description: IADL
        participation:
          type: string
          description: 参加・参加制約
        environment:
          type: string
          description: 環境
        livingSituation:
          type: string
          description: 生活状況
        legalSupport:
          type: string
          description: 制度的環境
        personalTraits:
          type: string
          description: 個人因子
        createdAt:
          format: date-time
          type: string
          description: 作成日時
      required:
        - uid
        - subjectUid
        - subject
        - tenantUid
        - userUid
        - familyInfo
        - careLevel
        - physicalIndependence
        - cognitiveIndependence
        - medicalHistory
        - medications
        - formalServices
        - informalSupport
        - consultationBackground
        - lifeHistory
        - complaints
        - healthNotes
        - mentalStatus
        - physicalStatus
        - adlStatus
        - communication
        - dailyLife
        - instrumentalADL
        - participation
        - environment
        - livingSituation
        - legalSupport
        - personalTraits
        - createdAt
    AssessmentListResponseDto:
      type: object
      properties:
        items:
          description: アセスメント一覧
          type: array
          items:
            $ref: "#/components/schemas/AssessmentDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    AssessmentCreateInputDto:
      type: object
      properties:
        subjectUid:
          type: string
          description: アセスメント対象者UID
      required:
        - subjectUid
    AssessmentUpdateInputDto:
      type: object
      properties:
        familyInfo:
          type: string
          description: 家族構成
        careLevel:
          type: string
          description: 要介護状態区分
          enum:
            - NEEDS_CARE_1
            - NEEDS_CARE_2
            - NEEDS_CARE_3
            - NEEDS_CARE_4
            - NEEDS_CARE_5
        physicalIndependence:
          type: string
          description: 障害高齢者の日常生活自立度判定基準
          enum:
            - INDEPENDENT
            - J1
            - J2
            - A1
            - A2
            - B1
            - B2
            - C1
            - C2
        cognitiveIndependence:
          type: string
          description: 認知症高齢者の日常生活自立度判定基準
          enum:
            - INDEPENDENT
            - I
            - IIa
            - IIb
            - IIIa
            - IIIb
            - IV
            - M
        medicalHistory:
          type: string
          description: 既往症
        medications:
          type: string
          description: 服用薬剤
        formalServices:
          type: string
          description: 使用しているフォーマルサービス
        informalSupport:
          type: string
          description: 使用しているインフォーマルサービス
        consultationBackground:
          type: string
          description: 相談に至った経緯
        lifeHistory:
          type: string
          description: 生活史
        complaints:
          type: string
          description: 主訴
        healthNotes:
          type: string
          description: 健康状態
        mentalStatus:
          type: string
          description: 精神状態
        physicalStatus:
          type: string
          description: 身体状態
        adlStatus:
          type: string
          description: ADL
        communication:
          type: string
          description: コミュニケーション
        dailyLife:
          type: string
          description: 日常生活
        instrumentalADL:
          type: string
          description: IADL
        participation:
          type: string
          description: 参加・参加制約
        environment:
          type: string
          description: 環境
        livingSituation:
          type: string
          description: 生活状況
        legalSupport:
          type: string
          description: 制度的環境
        personalTraits:
          type: string
          description: 個人因子
    AssessmentExtractDto:
      type: object
      properties:
        familyInfo:
          type: string
          description: 家族構成
        careLevel:
          type: string
          description: 要介護状態区分
          enum:
            - NEEDS_CARE_1
            - NEEDS_CARE_2
            - NEEDS_CARE_3
            - NEEDS_CARE_4
            - NEEDS_CARE_5
        physicalIndependence:
          type: string
          description: 障害高齢者の日常生活自立度判定基準
          enum:
            - INDEPENDENT
            - J1
            - J2
            - A1
            - A2
            - B1
            - B2
            - C1
            - C2
        cognitiveIndependence:
          type: string
          description: 認知症高齢者の日常生活自立度判定基準
          enum:
            - INDEPENDENT
            - I
            - IIa
            - IIb
            - IIIa
            - IIIb
            - IV
            - M
        medicalHistory:
          type: string
          description: 既往症
        medications:
          type: string
          description: 服用薬剤
        formalServices:
          type: string
          description: 使用しているフォーマルサービス
        informalSupport:
          type: string
          description: 使用しているインフォーマルサービス
        consultationBackground:
          type: string
          description: 相談に至った経緯
        lifeHistory:
          type: string
          description: 生活史
        complaints:
          type: string
          description: 主訴
        healthNotes:
          type: string
          description: 健康状態
        mentalStatus:
          type: string
          description: 精神状態
        physicalStatus:
          type: string
          description: 身体状態
        adlStatus:
          type: string
          description: ADL
        communication:
          type: string
          description: コミュニケーション
        dailyLife:
          type: string
          description: 日常生活
        instrumentalADL:
          type: string
          description: IADL
        participation:
          type: string
          description: 参加・参加制約
        environment:
          type: string
          description: 環境
        livingSituation:
          type: string
          description: 生活状況
        legalSupport:
          type: string
          description: 制度的環境
        personalTraits:
          type: string
          description: 個人因子
      required:
        - familyInfo
        - careLevel
        - physicalIndependence
        - cognitiveIndependence
        - medicalHistory
        - medications
        - formalServices
        - informalSupport
        - consultationBackground
        - lifeHistory
        - complaints
        - healthNotes
        - mentalStatus
        - physicalStatus
        - adlStatus
        - communication
        - dailyLife
        - instrumentalADL
        - participation
        - environment
        - livingSituation
        - legalSupport
        - personalTraits
    SubjectListResponseDto:
      type: object
      properties:
        items:
          description: アセスメント対象者一覧
          type: array
          items:
            $ref: "#/components/schemas/SubjectDto"
        total:
          type: number
          description: 総件数
      required:
        - items
        - total
    SubjectCreateInputDto:
      type: object
      properties:
        familyName:
          type: string
          description: 姓
          example: 山田
        givenName:
          type: string
          description: 名
          example: 太郎
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
          example: ヤマダ
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
          example: タロウ
        dateOfBirth:
          type: string
          description: 生年月日
          example: 1950-01-01
        gender:
          type: string
          description: 性別
          enum:
            - MALE
            - FEMALE
          example: MALE
      required:
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - dateOfBirth
        - gender
    SubjectUpdateInputDto:
      type: object
      properties:
        familyName:
          type: string
          description: 姓
          example: 山田
        givenName:
          type: string
          description: 名
          example: 太郎
        familyNameFurigana:
          type: string
          description: 姓（フリガナ）
          example: ヤマダ
        givenNameFurigana:
          type: string
          description: 名（フリガナ）
          example: タロウ
        dateOfBirth:
          type: string
          description: 生年月日
          example: 1950-01-01
        gender:
          type: string
          description: 性別
          enum:
            - MALE
            - FEMALE
          example: MALE
      required:
        - familyName
        - givenName
        - familyNameFurigana
        - givenNameFurigana
        - dateOfBirth
        - gender
    ThreadCreateOutputDto:
      type: object
      properties:
        uid:
          type: string
        title:
          type: string
        createdByUid:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - uid
        - title
        - createdByUid
        - createdAt
        - updatedAt
    ThreadListItemOutputDto:
      type: object
      properties:
        uid:
          type: string
        title:
          type: string
        createdByUid:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - uid
        - title
        - createdByUid
        - createdAt
        - updatedAt
    ThreadListOutputDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ThreadListItemOutputDto"
        total:
          type: number
      required:
        - items
        - total
    MessageOutputDto:
      type: object
      properties:
        uid:
          type: string
        threadUid:
          type: string
        content:
          type: string
        role:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - uid
        - threadUid
        - content
        - role
        - createdAt
        - updatedAt
    ThreadOutputDto:
      type: object
      properties:
        uid:
          type: string
        title:
          type: string
        createdByUid:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageOutputDto"
      required:
        - uid
        - title
        - createdByUid
        - createdAt
        - updatedAt
        - messages
    ThreadUpdateInputDto:
      type: object
      properties:
        title:
          type: string
      required:
        - title
    MessageCreateInputDto:
      type: object
      properties: {}
    CreateQaSessionDto:
      type: object
      properties:
        title:
          type: string
          description: タイトル
      required:
        - title
    QuestionAnswerOutputDto:
      type: object
      properties:
        uid:
          type: string
          description: 質問回答UID
        question:
          type: string
          description: 質問
        answer:
          type: string
          description: 回答
        createdAt:
          format: date-time
          type: string
          description: 作成日時
        updatedAt:
          format: date-time
          type: string
          description: 更新日時
      required:
        - uid
        - question
        - answer
        - createdAt
        - updatedAt
    QaSessionOutputDto:
      type: object
      properties:
        uid:
          type: string
          description: QAセッションUID
        userUid:
          type: string
          description: ユーザーUID
        questionAnswers:
          description: 質問回答
          type: array
          items:
            $ref: "#/components/schemas/QuestionAnswerOutputDto"
        createdAt:
          format: date-time
          type: string
          description: 作成日時
        updatedAt:
          format: date-time
          type: string
          description: 更新日時
        transcription:
          type: string
          description: 文字起こし
      required:
        - uid
        - userUid
        - questionAnswers
        - createdAt
        - updatedAt
        - transcription
    QaSessionListOutputDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/QaSessionOutputDto"
        total:
          type: number
          description: 総数
      required:
        - items
        - total
    CreateQuestionAnswerDto:
      type: object
      properties:
        qaSessionUid:
          type: string
          description: QAセッションID
        question:
          type: string
          description: 質問内容
        answer:
          type: string
          description: 回答内容
      required:
        - qaSessionUid
        - question
        - answer
    UpdateQuestionAnswerDto:
      type: object
      properties:
        uid:
          type: string
          description: 質問回答ID
          example: 123e4567-e89b-12d3-a456-426614174000
        question:
          type: string
          description: 質問内容
          example: 今日の体調はいかがですか？
        answer:
          type: string
          description: 回答内容
          example: 調子が良いです。
      required:
        - uid
        - question
        - answer
    QuestionAnswerItem:
      type: object
      properties:
        question:
          type: string
          description: 質問内容
          example: 今日の体調はいかがですか？
        answer:
          type: string
          description: 回答内容
          example: 調子が良いです。
      required:
        - question
        - answer
    UpsertQuestionAnswersDto:
      type: object
      properties:
        questionAnswers:
          description: 質問と回答のリスト
          type: array
          items:
            $ref: "#/components/schemas/QuestionAnswerItem"
      required:
        - questionAnswers
    ExtractedQaPair:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
      required:
        - question
        - answer
    ExtractQaPairsOutputDto:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ExtractedQaPair"
      required:
        - data
    TranscriptAudioInputDto:
      type: object
      properties:
        audio:
          type: string
          format: binary
      required:
        - audio
